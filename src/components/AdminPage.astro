---
import type { Talks } from "../../db/types";
import Layout from "../Layout.astro";
import type { AdminTalk } from "../lib/service";
import Option from "./Option.astro";
interface Props {
	talks: AdminTalk[];
}
const { talks } = Astro.props;
---

<Layout>
	<header class="w-full h-[70px] shadow-2xl bg-blue-800">
		<h1 class="text-3xl text-white font-bold p-4 uppercase">
			<a href="/">Conferencias espaciales</a>
		</h1>
	</header>
	<section
		class="w-full h-[calc(100vh-70px)] flex justify-center items-center p-4"
	>
		<div class="w-4/5 h-full mx-auto bg-slate-500 rounded-xl shadow p-8">
			<table class="w-full">
				<thead class="text-left text-3xl font-bold text-white">
					<tr class="border-b-2 border-white">
						<th class="p-4">Fecha</th>
						<th class="p-4">Nombre</th>
						<th class="p-4">Usuario</th>
						<th class="p-4">Descripcion</th>
						<th class="p-4">Estado</th>
					</tr>
				</thead>
				<tbody class="text-white">
					{
						talks.map((talk, index) => (
							<tr
								class:list={[
									"border-b-2 border-white",
									index % 2 === 0
										? "bg-slate-900"
										: "bg-slate-700",
								]}
							>
								<td class="p-4">{talk.date}</td>
								<td class="p-4">{talk.name}</td>
								<td class="p-4">{talk.user.name}</td>
								<td class="p-4">{talk.description}</td>
								<td class="p-4">
									<select
										name="status"
										id={`select-${talk.id.toString()}`}
										class="bg-slate-900"
										
									>
										<>
											<Option state={talk.state} value="pending">
												Pendiente
											</Option>
											<Option state={talk.state} value="accepted">
												Aceptada
											</Option>
											<Option state={talk.state} value="rejected">
												Rechazada
											</Option>									
										</>
									</select>
								</td>
							</tr>
						))
					}
				</tbody>
			</table>
		</div>
	</section>
</Layout>

<script>
	// TODO hacer debounce de la actualizacion
	// TODO arreglar el error de no se encontro el elemento
	// TODO colocar un alert
	const selects = document.querySelectorAll("select");
	selects.forEach((select) => {
		select.addEventListener("change", async (e: Event) => {
			const element = e.target as HTMLSelectElement;
			const id = element.id.split("-")[1];
			const value = element.value;
			const response = await fetch(`/api/update-status`, {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({ status: value, id }),
			});
			const result = await response.json();
			if (result.ok == false) {
				alert(result.message);
			}
		});
	});
</script>
