---
import { db, TalksTable, UserTable, eq } from "astro:db";
import Layout from "../../Layout.astro";

const rows = await db
	.select()
	.from(TalksTable)
	.innerJoin(UserTable, eq(TalksTable.user_id, UserTable.id));

const talks = rows.map((row) => {
	return {
		...row.TalksTable,
		user: {
			id: row.UserTable.id,
			name: row.UserTable.name,
			email: row.UserTable.email,
		},
	};
});
---

<Layout>
	<header class="w-full h-[70px] shadow-2xl bg-blue-800">
		<h1 class="text-3xl text-white font-bold p-4 uppercase">
			<a href="/">Conferencias espaciales</a>
		</h1>
	</header>
	<section
		class="w-full h-[calc(100vh-70px)] flex justify-center items-center p-4"
	>
		<div class="w-4/5 h-full mx-auto bg-slate-500 rounded-xl shadow p-8">
			<table class="w-full">
				<thead class="text-left text-3xl font-bold text-white">
					<tr class="border-b-2 border-white">
						<th class="p-4">Fecha</th>
						<th class="p-4">Nombre</th>
						<th class="p-4">Usuario</th>
						<th class="p-4">Descripcion</th>
						<th class="p-4">Estado</th>
					</tr>
				</thead>
				<tbody class="text-white">
					{
						talks.map((talk, index) => (
							<tr
								class:list={[
									"border-b-2 border-white",
									index % 2 === 0
										? "bg-slate-900"
										: "bg-slate-700",
								]}
							>
								<td class="p-4">{talk.date}</td>
								<td class="p-4">{talk.name}</td>
								<td class="p-4">{talk.user.name}</td>
								<td class="p-4">{talk.description}</td>
								<td class="p-4">
									<select
										name="status"
										id={`select-${talk.id.toString()}`}
										class="bg-slate-900"
									>
										<>
											<option value="pendiente">
												Pendiente
											</option>
											<option value="aceptada">
												Aceptada
											</option>
											<option value="rechazada">
												Rechazada
											</option>
										</>
									</select>
								</td>
							</tr>
						))
					}
				</tbody>
			</table>
		</div>
	</section>
</Layout>

<script>
	// TODO hacer debounce de la actualizacion
	// TODO arreglar el error de no se encontro el elemento
	// TODO colocar un alert
	const selects = document.querySelectorAll("select");
	selects.forEach((select) => {
		select.addEventListener("change", async (e) => {
				const id = e.target.id.split("-")[1];
				console.log(id);
				
		});
	});
</script>